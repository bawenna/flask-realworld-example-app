Parameters:
  buildBucketName:
    Type: String
  buildObjectKey:
    Type: String
Resources:
  AppNode:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-085925f297f89fce1
      KeyName: aws-key
      SecurityGroups:
        - !Ref AppNodeSG
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install -y docker-ce
          sudo systemctl status docker
          sudo groupadd docker
          sudo usermod -a -G docker $(whoami)
          # printf "{"hosts": ["tcp://0.0.0.0:2375", "unix:///var/run/docker.sock"]}" |sudo tee /etc/docker/daemon.json
          # printf "[Service]\nExecStart=\nExecStart=/usr/bin/dockerd\n" | sudo tee /etc/systemd/system/docker.service.d/override.conf
          sudo systemctl daemon-reload
          sudo systemctl restart docker.service
   LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python3.6
      Handler: main.lamda_handler
      Timeout: '10'
      Role: !GetAtt
      	- LambdaExecutionRole
      	- Arn
      Code:
   	    S3Bucket: codepipeline-flask-demo
   	    S3Key: Pipfile
  AppNodeSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ports that allows ssh, http, and docker
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '2375'
        ToPort: '2375'
        CidrIp: 0.0.0.0/0
